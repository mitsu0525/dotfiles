[[plugins]] # plugin manager
repo = 'Shougo/dein.vim'

[[plugins]] # colorscheme
repo = 'altercation/vim-colors-solarized'
hook_add = '''
    set background=dark
    autocmd MyAutoCmd VimEnter * nested colorscheme solarized
'''

[[plugins]] # enhance statusline
repo = 'itchyny/lightline.vim'
hook_add = '''
    set laststatus=2
    set t_Co=256
    set noshowmode
'''

[[plugins]] # lightline-theme
repo = 'delphinus/lightline-delphinus'
depends = ['lightline.vim', 'vim-devicons', 'tagber', 'vim-gitgutter']
hook_add = '''
    let g:lightline_delphinus_colorscheme='solarized_improved'
    let g:lightline_delphinus_tagbar_enable=1
    let g:lightline_delphinus_gitgutter_enable=1
'''

[[plugins]] # display buffer on tabline
repo = 'ap/vim-buftabline'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]] # visible indent
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_faster = 1
'''

[[plugins]] # japanese help
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'rhysd/clever-f.vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
    let g:EasyMotion_do_mapping = 0
    " s{char}{char} to move to {char}{char}
    nmap , <Plug>(easymotion-overwin-f2)
    vmap , <Plug>(easymotion-bd-f2)
'''

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add = 'source ~/.vim/rc/plugins/vim-textobj-user.vim'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
    vmap <CR> <Plug>(EasyAlign)
'''

[[plugins]] # complition
repo = 'cohama/lexima.vim'
hook_add = 'source ~/.vim/rc/plugins/lexima.vim'

[[plugins]] # commentout
repo = 'scrooloose/nerdcommenter'
hook_add = '''
    nmap <silent> gc <Plug>NERDCommenterToggle
    nmap <silent> ga <Plug>NERDCommenterAppend
    nmap <silent> gs <Plug>NERDCommenterSexy
    vmap <silent> gc <Plug>NERDCommenterToggle
    vmap <silent> ga <Plug>NERDCommenterAppend
    vmap <silent> gs <Plug>NERDCommenterSexy
    let g:NERDCreateDefaultMappings = 0
    let g:NERDSpaceDelims = 1            " Add spaces after comment delimiters by default
    let g:NERDCompactSexyComs = 1        " Use compact syntax for prettified multi-line comments
    let g:NERDDefaultAlign = 'left'      " Align line-wise comment delimiters flush left instead of following code indentation
    let g:NERDCommentEmptyLines = 1      " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDTrimTrailingWhitespace = 1 " Enable trimming of trailing whitespace when uncommenting
    let g:NERDToggleCheckAllLines = 1    " Enable NERDCommenterToggle to check all selected lines is commented or not
'''

[[plugins]] # filer
repo = 'scrooloose/nerdtree'
hook_add = '''
    nmap <silent> [Space]o :NERDTreeToggle<CR>
    nmap <silent> <C-q>    :NERDTreeToggle<CR>
    let g:NERDTreeMinimalUI=1
    let g:NERDTreeShowBookmarks=1
    let g:NERDTreeShowHidden=1
    let g:NERDTreeQuitOnOpen=1
    let g:NERDTreeIgnore=['\.DS_Store$','\.git']
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

# ---------- Git plugins ----------
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    set signcolumn=yes " Show gitgutter column always
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

# ---------- Syntax ----------
[[plugins]] # for deoplete
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]] # for deoplete
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]] # check syntax
repo = 'w0rp/ale'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
hook_add = '''
    let g:precious_enable_switch_CursorMoved = { "help" : 0 }
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
