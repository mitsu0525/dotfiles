[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カラースキーマ
repo = 'altercation/vim-colors-solarized'
hook_add = '''
    set background=dark
    " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
    " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
    au MyAutoCmd VimEnter * nested colorscheme solarized
'''

[[plugins]] # ステータスラインの内容強化
repo = 'itchyny/lightline.vim'
hook_add = '''
    set laststatus=2
    set t_Co=256
    set noshowmode
'''

[[plugins]] # lightline-theme
repo = 'delphinus/lightline-delphinus'
depends = ['lightline.vim', 'vim-devicons', 'tagber', 'vim-gitgutter']
hook_add = '''
    let g:lightline_delphinus_use_powerline_glyphs=1
    let g:lightline_delphinus_use_nerd_fonts_glyphs=1
    let g:lightline_delphinus_colorscheme='solarized_improved'
    let g:lightline_delphinus_tagbar_enable=1
    let g:lightline_delphinus_gitgutter_enable=1
    " nr2char(...) is for describing icons from devicons
    let g:ale_echo_msg_error_str = nr2char(0xf421) . ' '
    let g:ale_echo_msg_warning_str = nr2char(0xf420) . ' '
    let g:ale_echo_msg_info_str = nr2char(0xf05a) . ' '
    let g:ale_echo_msg_format = '%severity%  %linter% - %s'
    let g:ale_sign_column_always = 1
    let g:ale_sign_error = g:ale_echo_msg_error_str
    let g:ale_sign_warning = g:ale_echo_msg_warning_str
    let g:ale_statusline_format = [ g:ale_echo_msg_error_str . ' %d', g:ale_echo_msg_warning_str . ' %d', nr2char(0xf4a1) . '  ']
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
    " vim-devicons
    let g:webdevicons_conceal_nerdtree_brackets = 1
    let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
    " dir-icons
    let g:WebDevIconsUnicodeDecorateFolderNodes = 1
    let g:DevIconsEnableFoldersOpenClose = 1
    let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ''
    let g:DevIconsDefaultFolderOpenSymbol = ''
    " file-icons
    let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
    let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ''
    let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['css'] = ''
    let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ''
    let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['txt'] = ''
'''

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]] # インデントの可視化
repo = 'Yggdroot/indentLine'
hook_add = 'let g:indentLine_faster = 1'

[[plugins]] # 日本語ヘルプ
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = 'vmap <CR> <Plug>(EasyAlign)'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_source = 'source ~/.vim/rc/plugins/lexima.vim'

[[plugins]] # コメントアウト
repo = 'scrooloose/nerdcommenter'
hook_add = '''
    nmap <silent> gc <Plug>NERDCommenterToggle
    nmap <silent> ga <Plug>NERDCommenterAppend
    nmap <silent> gs <Plug>NERDCommenterSexy
    vmap <silent> gc <Plug>NERDCommenterToggle
    vmap <silent> ga <Plug>NERDCommenterAppend
    vmap <silent> gs <Plug>NERDCommenterSexy
    let g:NERDCreateDefaultMappings = 0
    let g:NERDSpaceDelims = 1            " Add spaces after comment delimiters by default
    let g:NERDCompactSexyComs = 1        " Use compact syntax for prettified multi-line comments
    let g:NERDDefaultAlign = 'left'      " Align line-wise comment delimiters flush left instead of following code indentation
    let g:NERDCommentEmptyLines = 1      " Allow commenting and inverting empty lines (useful when commenting a region)
    let g:NERDTrimTrailingWhitespace = 1 " Enable trimming of trailing whitespace when uncommenting
    let g:NERDToggleCheckAllLines = 1    " Enable NERDCommenterToggle to check all selected lines is commented or not
'''

[[plugins]] # ツリー表示
repo = 'scrooloose/nerdtree'
hook_add = '''
    let g:NERDTreeMinimalUI=1
    let g:NERDTreeShowBookmarks=1
    let g:NERDTreeShowHidden=1
    let g:NERDTreeQuitOnOpen=1
    let g:NERDTreeIgnore=['\.DS_Store$','\.git']
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
'''

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
depends = 'nerdtree'
on_map = {n = '<Plug>'}
hook_add = '''
    nmap <silent> <Space>o <plug>NERDTreeTabsToggle<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]] # deoplete用
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]] # deoplete用
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]] # 構文チェック
repo = 'w0rp/ale'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
hook_add = 'let g:precious_enable_switch_CursorMoved = { "help" : 0 }'

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'
