# ---------- Essential -----------
[[plugins]] # plugin manager
repo = 'Shougo/dein.vim'

[[plugins]] # most recent use
repo = 'Shougo/neomru.vim'

[[plugins]] # detect filetype
repo = 'Shougo/context_filetype.vim'

# ---------- Appearance -----------
[[plugins]] # colorscheme
repo = 'matsen/nvim-colors-solarized'
on_if = 'has("nvim")'
hook_add = '''
    set background=dark
    autocmd MyAutoCmd VimEnter * nested colorscheme solarized
'''

[[plugins]] # colorscheme
repo = 'altercation/vim-colors-solarized'
on_if = '!has("nvim")'
hook_add = '''
    set background=dark
    autocmd MyAutoCmd VimEnter * nested colorscheme solarized
'''

[[plugins]] # enhance statusline
repo = 'itchyny/lightline.vim'
hook_add = '''
    set laststatus=2
    set t_Co=256
    set noshowmode
'''

[[plugins]] # lightline-theme
repo = 'delphinus/lightline-delphinus'
depends = ['lightline.vim']
hook_add = '''
    let g:lightline_delphinus_colorscheme = 'solarized_improved'
    autocmd MyAutoCmd User ALELint call lightline#update()
'''

[[plugins]] # display buffer in tabline
repo = 'ap/vim-buftabline'

[[plugins]] # visible indent
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_faster = 1
    let g:indentLine_concealcursor = ''
    let g:indentLine_bufNameExclude = ['help', 'denite']
    let g:indentLine_fileTypeExclude = ['help', 'denite']
'''

[[plugins]] # japanese help
repo = 'vim-jp/vimdoc-ja'

# ---------- Useful plugins ----------
[[plugins]] # smart f
repo = 'rhysd/clever-f.vim'

# [[plugins]] # window move
# repo = 'christoomey/vim-tmux-navigator'

# [[plugins]] # add text object
# repo = 'kana/vim-textobj-user'
# hook_add = 'source ~/.vim/rc/plugins/vim-textobj-user.vim'

[[plugins]] # add vim operator
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
    xmap <CR> <Plug>(LiveEasyAlign)
'''

[[plugins]] # bracket completion
repo = 'cohama/lexima.vim'
hook_add = '''
    let g:lexima_map_escape = 'jj'
    inoremap <C-f> <C-r>=lexima#insmode#leave(1, '<LT>C-G>U<LT>RIGHT>')<CR>
'''

# [[plugins]]
# repo = 'neoclide/coc.nvim'
# rev = 'release'
# merged = '0'
# hook_add = 'source ~/.vim/rc/plugins/coc.rc.vim'

[[plugins]] # for deoplete
repo = 'tbodt/deoplete-tabnine'
build = './install.sh'

[[plugins]] # for deoplete
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]] # for deoplete
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]] # linter
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_set_highlights = 0
    " エラー行に表示するマーク
    let g:ale_sign_error = '✗'
    let g:ale_sign_warning = '!'
    highlight link ALEErrorSign ErrorMsg
    highlight link ALEWarningSign Search
    " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
    let g:ale_echo_msg_format = '[%linter%] %code: %%s [%severity%]'
    " エラー表示の列を常時表示
    let g:ale_sign_column_always = 1
    " ステータスラインに情報を表示
    let g:ale_statusline_format = [
    \   g:ale_sign_error . ' %d',
    \   g:ale_sign_warning . ' %d',
    \   '✓']

    " ファイルを開いたときにlint実行
    let g:ale_lint_on_enter = 1
    " ファイルを保存したときにlint実行
    let g:ale_lint_on_save = 1
    " 編集中のlintはしない
    let g:ale_lint_on_text_changed = 0
    " 有効にするlinter
    let g:ale_linters = {
    \   'sh': ['language_server'],
    \   'cpp': ['cpplint'],
    \   'python': ['flake8'],
    \}

    " ファイルを保存したときにfix実行
    let g:ale_fix_on_save = 1
    " 有効にするfixer
    let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \   'cpp': ['clangd'],
    \   'python': ['nayvy#ale_fixer','black'],
    \}

    " 各ツールの実行オプションを変更してPythonパスを固定
    let g:ale_python_flake8_executable = g:python3_host_prog
    let g:ale_python_flake8_options = '-m flake8'
    let g:ale_python_black_executable = g:python3_host_prog
    let g:ale_python_black_options = '-m black'
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
hook_add = '''
    let g:precious_enable_switchers = {
    \   "*" : {
    \       "setfiletype" : 0
    \   },
    \   "vim" : {
    \       "setfiletype" : 1
    \   },
    \   "toml" : {
    \       "setfiletype" : 1
    \   },
    \}
    let g:precious_enable_switch_CursorMoved = {
    \   "*" : 1,
    \   "help" : 0,
    \}
'''

[[plugins]] # language pack
repo = 'sheerun/vim-polyglot'
hook_add = '''
    let g:polyglot_disabled = ['markdown']
'''

[[plugins]] # for Markdown
repo = 'plasticboy/vim-markdown'
hook_add = '''
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_auto_insert_bullets = 0
    let g:vim_markdown_new_list_item_indent = 0
'''

[[plugins]]
repo = 'matze/vim-move'
hook_add = '''
   nmap <Left>  <Plug>MoveCharLeft
   nmap <Down>  <Plug>MoveLineDown
   nmap <Up>    <Plug>MoveLineUp
   nmap <Right> <Plug>MoveCharRight
   xmap <Left>  <Plug>MoveBlockLeft
   xmap <Down>  <Plug>MoveBlockDown
   xmap <Up>    <Plug>MoveBlockUp
   xmap <Right> <Plug>MoveBlockRight
'''

# [[plugins]]
# repo = 'mitsu0525/vim-yoink'
# hook_add = '''
#     let g:yoinkMoveCursorToEndOfPaste = 1
#     nnoremap <silent><SID>(bnext) :<C-u>bnext<CR>
#     nmap <expr><C-n> yoink#isActive() ? '<Plug>(YoinkPostPasteSwapForward)' : '<SID>(bnext)'
#     nnoremap <silent><SID>(bprev) :<C-u>bprev<CR>
#     nmap <expr><C-p> yoink#isActive() ? '<Plug>(YoinkPostPasteSwapBack)' : '<SID>(bprev)'
#     nmap p <Plug>(YoinkPaste_p)
#     nmap P <Plug>(YoinkPaste_P)
# '''

# ---------- Git plugins ----------
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    set signcolumn=yes " Show gitgutter column always
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nmap [fugitive] <Nop>
    map  [Space]g [fugitive]
    nmap <silent> [fugitive]s :<C-u>Gstatus<CR>
    nmap <silent> [fugitive]d :<C-u>Gdiff<CR>
    nmap <silent> [fugitive]b :<C-u>Gblame<CR>
    nmap <silent> [fugitive]l :<C-u>Glog<CR>
'''
